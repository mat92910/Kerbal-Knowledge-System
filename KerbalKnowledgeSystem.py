# Form implementation generated from reading ui file 'KerbalKnowledgeSystem.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt, QSize
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import networkx as nx
import matplotlib.pyplot as plt
import Inference
import DeltaVMap
import DeltaVGraph
import copy

def FillStartingPosition(ComboBox):
    nameList = DeltaVMap.GetNameList()

    for key in nameList.keys():
        ComboBox.addItem(nameList[key], key)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(360, 570)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.RoundTrip = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.RoundTrip.setGeometry(QtCore.QRect(30, 450, 121, 23))
        self.RoundTrip.setObjectName("RoundTrip")
        self.Aerobreaking = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.Aerobreaking.setGeometry(QtCore.QRect(30, 470, 121, 23))
        self.Aerobreaking.setObjectName("Aerobreaking")
        self.PlaneChange = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.PlaneChange.setGeometry(QtCore.QRect(30, 490, 121, 23))
        self.PlaneChange.setObjectName("PlaneChange")
        self.DeltaVList = QtWidgets.QListWidget(parent=self.centralwidget)
        self.DeltaVList.setGeometry(QtCore.QRect(30, 90, 301, 311))
        self.DeltaVList.setObjectName("DeltaVList")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 299, 309))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.StartingLocation = QtWidgets.QComboBox(parent=self.centralwidget)
        self.StartingLocation.setGeometry(QtCore.QRect(30, 420, 181, 25))
        self.StartingLocation.setObjectName("StartingLocation")
        self.DeltaVLabel = QtWidgets.QLabel(parent=self.centralwidget)
        self.DeltaVLabel.setGeometry(QtCore.QRect(30, 20, 91, 17))
        self.DeltaVLabel.setObjectName("DeltaVLabel")
        self.DeltaVNumber = QtWidgets.QSpinBox(parent=self.centralwidget)
        self.DeltaVNumber.setGeometry(QtCore.QRect(30, 50, 201, 26))
        self.DeltaVNumber.setMaximum(999999999)
        self.DeltaVNumber.setObjectName("DeltaVNumber")
        self.AddDeltaVButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.AddDeltaVButton.setGeometry(QtCore.QRect(250, 50, 80, 25))
        self.AddDeltaVButton.setObjectName("AddDeltaV")
        self.Graph = QtWidgets.QWidget(parent=self.centralwidget)
        self.Graph.setGeometry(QtCore.QRect(370, 20, 501, 501))
        self.Graph.setObjectName("Graph")
        self.Calculate = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Calculate.setGeometry(QtCore.QRect(30, 520, 181, 25))
        self.Calculate.setObjectName("Calculate")
        self.Clear = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Clear.setGeometry(QtCore.QRect(250, 420, 80, 25))
        self.Clear.setObjectName("Clear")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        #Custom Variables
        self.DeltaVStages = []

        #Custom Linking
        FillStartingPosition(self.StartingLocation)
        self.StartingLocation.setStyleSheet("combobox-popup: 0;")
        self.AddDeltaVButton.clicked.connect(self.AddDeltaV)
        self.Calculate.clicked.connect(self.CalculateGraph)
        self.Clear.clicked.connect(self.ClearDeltaV)
        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Kerbal Knowledge System"))
        self.RoundTrip.setText(_translate("MainWindow", "Round Trip"))
        self.Aerobreaking.setText(_translate("MainWindow", "Aerobraking"))
        self.PlaneChange.setText(_translate("MainWindow", "Plane Change"))
        self.DeltaVLabel.setText(_translate("MainWindow", "Input Delta-V:"))
        self.AddDeltaVButton.setText(_translate("MainWindow", "Add Delta-V"))
        self.Calculate.setText(_translate("MainWindow", "Calculate"))
        self.Clear.setText(_translate("MainWindow", "Clear Stages"))

    #custom Functions
    def AddDeltaV(self):
        DeltaV = self.DeltaVNumber.value()
        self.DeltaVStages.append(DeltaV)
        self.DeltaVList.insertItem(len(self.DeltaVStages), "Stage " + str(len(self.DeltaVStages)) + " Delta-V: " + str(DeltaV))
        print("DeltaV: " + str(DeltaV))

    def ClearDeltaV(self):
        self.DeltaVStages.clear()
        self.DeltaVList.clear()

    def CalculateGraph(self):
        if(len(self.DeltaVStages) < 1):
            print("No Stages")
        else:
            print(self.StartingLocation.currentData())
            print(self.DeltaVStages)
            print(self.RoundTrip.isChecked())
            nameList = DeltaVMap.GetNameList()

            nameList = {x: v.replace(' ', '\n')
                    for x, v in nameList.items()}

            AvailableNodes = []
            AvailableNodesNames = {}
            color_map = []
            DeltaVStages=copy.deepcopy(self.DeltaVStages)
            AvailableNodes = Inference.FindAvailableNodeFromDeltaV(AvailableNodes, self.StartingLocation.currentData(), DeltaVStages, self.RoundTrip.isChecked(), self.Aerobreaking.isChecked(), self.PlaneChange.isChecked())

            for Nodes in AvailableNodes:
                AvailableNodesNames[Nodes] = nameList[Nodes]

            G = DeltaVGraph.GraphGivenNodes(AvailableNodes)

            color_map = ['green' if node == AvailableNodes[0] else 'blue' for node in G] 

            pos = nx.get_node_attributes(G, "pos")
            plt.figure(3,figsize=(18,9))
            nx.draw(G, pos, with_labels = True, labels=AvailableNodesNames, node_color=color_map, font_color='whitesmoke', node_size=2500, node_shape="s", font_size=10, arrowstyle="-")
            plt.show()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
